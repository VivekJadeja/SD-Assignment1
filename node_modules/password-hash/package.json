{
  "_from": "password-hash",
  "_id": "password-hash@1.2.2",
  "_inBundle": false,
  "_integrity": "sha1-O0UfAU3ksuHr+g5Uk7lRexBjrx0=",
  "_location": "/password-hash",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "password-hash",
    "fetchSpec": "latest",
    "name": "password-hash",
    "raw": "password-hash",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/password-hash/-/password-hash-1.2.2.tgz",
  "_shasum": "3b451f014de4b2e1ebfa0e5493b9517b1063af1d",
  "_spec": "password-hash",
  "_where": "C:\\Users\\deven\\Documents\\GitHub\\SD-Assignment1",
  "author": {
    "email": "bitprobe@gmail.com",
    "name": "David Wood"
  },
  "bin": {
    "nodepw": "bin/nodepw"
  },
  "bugs": {
    "url": "https://github.com/davidwood/node-password-hash/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Password hashing and verification for node.js",
  "devDependencies": {
    "colors": ">=0.5.0",
    "mocha": "*"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "homepage": "https://github.com/davidwood/node-password-hash#readme",
  "keywords": [
    "cli",
    "hash",
    "password",
    "utilities"
  ],
  "main": "./lib/password-hash.js",
  "name": "password-hash",
  "optionalDependencies": {},
  "readme": "# Deprecated: Use [bcrypt](https://github.com/ncb000gt/node.bcrypt.js) or [scrypt](https://github.com/barrysteyn/node-scrypt)\r\n\r\n## node-password-hash[![Build Status](https://secure.travis-ci.org/davidwood/node-password-hash.png)](http://travis-ci.org/davidwood/node-password-hash)\r\n\r\npassword-hash is a node.js library to simplify use of hashed passwords.\r\n\r\nStoring passwords in plain-text is bad.  This library makes the storing of passwords (and subsequent validation of) hashed passwords a bit easier.  \r\n\r\npassword-hash provides functions for generating a hashed passwords and verifying a plain-text password against a hashed password.  For a bit of added strength, a random salt is generated when the password is hashed.  The hashed password contains both the cryptographic algorithm that was used as well the salt, so all that is needed to verify a plain-text password is the hashed password itself.\r\n\r\n## Installation\r\n\r\n    npm install password-hash\r\n\r\n## Usage\r\n\r\n### generate(password, [options])\r\n\r\nGenerates a hash of the required `password` argument.  Hashing behavior can be modified with the optional `options` object:\r\n\r\n* `algorithm` - A valid cryptographic algorithm for use with the `crypto.createHmac` function, defaults to 'sha1'.\r\n* `saltLength` - The length of the salt that will be generated when the password is hashed, defaults to 8.\r\n* `iterations` - The number of times the hashing algorithm should be applied, defaults to 1.\r\n\r\nErrors are thrown if:\r\n\r\n* `password` is not a string\r\n* `options.algorithm` is specified but not a valid cryptographic algorithm\r\n* `options.saltLength` is specified but not a positive integer\r\n\r\nThe hashed password will be in the format `algorithm$salt$hash`.\r\n\r\nExample:\r\n<pre>\r\n    var passwordHash = require('password-hash');\r\n\r\n    var hashedPassword = passwordHash.generate('password123');\r\n\r\n    console.log(hashedPassword); // sha1$3I7HRwy7$cbfdac6008f9cab4083784cbd1874f76618d2a97\r\n</pre>\r\n\r\n### verify(password, hashedPassword)\r\n\r\nCompares a plain-text password (`password`) to a hashed password (`hashedPassword`) and returns a boolean.  Both arguments are required.\r\n\r\nExample:\r\n<pre>\r\n    var passwordHash = require('./lib/password-hash');\r\n\r\n    var hashedPassword = 'sha1$3I7HRwy7$cbfdac6008f9cab4083784cbd1874f76618d2a97';\r\n    \r\n    console.log(passwordHash.verify('password123', hashedPassword)); // true\r\n    console.log(passwordHash.verify('Password0', hashedPassword)); // false\r\n</pre>\r\n\r\n### isHashed(password)\r\n\r\nCheck if a password (`password`) is hashed.  Returns a boolean.\r\n\r\nExample:\r\n<pre>\r\n    var passwordHash = require('./lib/password-hash');\r\n\r\n    var hashedPassword = 'sha1$3I7HRwy7$cbfdac6008f9cab4083784cbd1874f76618d2a97';\r\n    \r\n    console.log(passwordHash.isHashed('password123')); // false\r\n    console.log(passwordHash.isHashed(hashedPassword)); // true\r\n</pre>\r\n\r\n## Salt Generation\r\n\r\nnode 0.5.8 introduced `crypto.randomBytes`, which generates cryptographically strong pseudo-random data. If the version of node supports `crypto.randomBytes` it is used to generate the salt, otherwise `Math.random`, which is not cryptographically strong, is used. This is handled transparently within the salt generation function and does not impact the module's API. \r\n\r\n## Inspired by\r\n\r\npassword-hash is inspired by the password hashing found in [Werkzeug](http://werkzeug.pocoo.org/).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/davidwood/node-password-hash.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.2.2"
}
